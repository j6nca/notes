/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsifetchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  customLogo: ""
};
var ObsifetchModal = class extends import_obsidian.Modal {
  constructor(app, logo, vaultInfo, systemInfo) {
    super(app);
    this.logo = logo;
    this.vaultInfo = vaultInfo;
    this.systemInfo = systemInfo;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("obsifetch-modal");
    contentEl.createEl("div", {
      text: "> obsifetch",
      cls: "obsifetch-title"
    });
    const container = contentEl.createDiv({ cls: "obsifetch-container" });
    const logoSection = container.createDiv({ cls: "logo-section" });
    logoSection.createEl("pre", { text: this.logo });
    const infoSection = container.createDiv({ cls: "info-section" });
    const vaultName = this.app.vault.getName();
    infoSection.createEl("div", {
      text: `${require("os").userInfo().username}@${vaultName.toLowerCase()}`,
      cls: "vault-header"
    });
    infoSection.createEl("div", {
      text: "-".repeat(36),
      cls: "vault-separator"
    });
    const preElement = infoSection.createEl("pre");
    this.vaultInfo.toLowerCase().split("\n").forEach((line) => {
      const [label, value] = line.split(": ");
      const lineDiv = preElement.createDiv();
      lineDiv.createSpan({ text: label + ": ", cls: "stat-label" });
      lineDiv.createSpan({ text: value, cls: "stat-value" });
    });
    this.systemInfo.toLowerCase().split("\n").forEach((line) => {
      const [label, value] = line.split(": ");
      const lineDiv = preElement.createDiv();
      lineDiv.createSpan({ text: label + ": ", cls: "stat-label" });
      lineDiv.createSpan({ text: value, cls: "stat-value" });
    });
    const colorSquares = preElement.createSpan({ cls: "color-squares" });
    const currentRow = colorSquares.createSpan({ cls: "color-row" });
    [
      "--interactive-accent",
      "--text-accent",
      "--text-faint",
      "--text-normal",
      "--text-muted",
      "--text-error",
      "--text-highlight-bg",
      "--background-secondary",
      "--background-primary"
    ].forEach((color) => {
      const square = currentRow.createSpan();
      square.style.backgroundColor = `var(${color})`;
      square.style.width = "1.5em";
      square.style.height = "1.5em";
      square.style.display = "inline-block";
      square.style.marginLeft = "0";
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ObsifetchSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Custom ASCII Logo").setDesc("Paste your custom ASCII art here").addTextArea((text) => text.setPlaceholder("Paste ASCII art here...").setValue(this.plugin.settings.customLogo).onChange(async (value) => {
      this.plugin.settings.customLogo = value;
      await this.plugin.saveSettings();
    }));
  }
};
var ObsifetchPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.defaultLogo = `        ;++       
      ;;+++X;     
    :;;;;;XXXX    
    :::::XXXXXX   
   ::..::XXXXXX   
   $+   .Xxx+++   
  $$$X  .:++++++  
 X$$$$X$&&$X+;;;+ 
;XXXXX$&$$$$$$;;. 
  XXXX$$$$$XXXX   
    XX$$XXXXXXX   
         ;XXXX     `;
  }
  async getVaultStats() {
    const activeTheme = this.app.customCss.theme || "default";
    const pluginCount = Object.keys(this.app.plugins.manifests).length;
    const allFiles = this.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian.TFile);
    const markdownFiles = allFiles.filter((file) => file.extension === "md");
    const attachments = allFiles.filter((file) => file.extension !== "md");
    return {
      totalFiles: allFiles.length,
      totalMarkdown: markdownFiles.length,
      totalAttachments: attachments.length,
      totalPlugins: pluginCount,
      theme: activeTheme
    };
  }
  getSystemInfo() {
    var _a;
    const isDarkTheme = document.body.classList.contains("theme-dark");
    let platform = "unknown";
    let osDetails = "";
    if ((_a = navigator.userAgentData) == null ? void 0 : _a.platform) {
      platform = navigator.userAgentData.platform.toLowerCase();
      if (platform === "linux") {
        if (navigator.userAgent.includes("Ubuntu")) {
          osDetails = "ubuntu";
        } else if (navigator.userAgent.includes("Fedora")) {
          osDetails = "fedora";
        } else if (navigator.userAgent.includes("Arch")) {
          osDetails = "arch";
        } else if (navigator.userAgent.includes("Debian")) {
          osDetails = "debian";
        } else {
          osDetails = "linux";
        }
      }
    } else {
      if (navigator.userAgent.includes("Win")) {
        platform = "windows";
      } else if (navigator.userAgent.includes("Mac")) {
        platform = "macos";
      } else if (navigator.userAgent.includes("Linux")) {
        platform = "linux";
      }
    }
    return [
      `appearance: ${isDarkTheme ? "dark" : "light"}`,
      `os: ${osDetails || platform}`
    ].join("\n").trimEnd();
  }
  async displayObsifetch() {
    const stats = await this.getVaultStats();
    const info = this.getSystemInfo();
    const logo = this.settings.customLogo || this.defaultLogo;
    const vaultInfoLines = [
      `total files: ${stats.totalFiles}`,
      `markdown files: ${stats.totalMarkdown}`,
      `attachments: ${stats.totalAttachments}`,
      `plugins: ${stats.totalPlugins}`,
      `theme: ${stats.theme}`
    ].join("\n").trimEnd();
    new ObsifetchModal(
      this.app,
      logo,
      vaultInfoLines,
      info
    ).open();
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ObsifetchSettingTab(this.app, this));
    console.log("loading obsifetch");
    this.addCommand({
      id: "show-obsifetch",
      name: "Show Obsifetch",
      callback: () => this.displayObsifetch()
    });
    this.ribbonIcon = this.addRibbonIcon(
      "terminal-square",
      "obsifetch",
      (evt) => {
        this.displayObsifetch();
      }
    );
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    console.log("unloading obsifetch");
    this.ribbonIcon.remove();
  }
};
//# sourceMappingURL=data:application/json;base64,
