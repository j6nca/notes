/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsifetchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  customLogo: ""
};
var getUsername = () => {
  try {
    return require("os").userInfo().username;
  } catch (e) {
    return "user";
  }
};
var ObsifetchModal = class extends import_obsidian.Modal {
  constructor(app, logo, vaultInfo, systemInfo) {
    super(app);
    this.logo = logo;
    this.vaultInfo = vaultInfo;
    this.systemInfo = systemInfo;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("obsifetch-modal");
    contentEl.createEl("div", {
      text: "> obsifetch",
      cls: "obsifetch-title"
    });
    const container = contentEl.createDiv({ cls: "obsifetch-container" });
    const logoSection = container.createDiv({ cls: "logo-section" });
    logoSection.createEl("pre", { text: this.logo });
    const infoSection = container.createDiv({ cls: "info-section" });
    const vaultName = this.app.vault.getName();
    infoSection.createEl("div", {
      text: `${getUsername()}@${vaultName.toLowerCase()}`,
      cls: "vault-header"
    });
    infoSection.createEl("hr", {
      cls: "vault-separator"
    });
    const preElement = infoSection.createEl("pre");
    this.vaultInfo.toLowerCase().split("\n").forEach((line) => {
      const [label, value] = line.split(": ");
      const lineDiv = preElement.createDiv();
      lineDiv.createSpan({ text: label + ": ", cls: "stat-label" });
      lineDiv.createSpan({ text: value, cls: "stat-value" });
    });
    this.systemInfo.toLowerCase().split("\n").forEach((line) => {
      const [label, value] = line.split(": ");
      const lineDiv = preElement.createDiv();
      lineDiv.createSpan({ text: label + ": ", cls: "stat-label" });
      lineDiv.createSpan({ text: value, cls: "stat-value" });
    });
    const colorSquares = preElement.createSpan({ cls: "color-squares" });
    for (let i = 0; i < 8; i++) {
      colorSquares.createSpan();
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ObsifetchSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Custom art").setDesc("Display your own ASCII art. Delete the content to reset to default.").addTextArea((text) => text.setPlaceholder("Paste ASCII art here...").setValue(this.plugin.settings.customLogo).onChange(async (value) => {
      this.plugin.settings.customLogo = value;
      await this.plugin.saveSettings();
    }));
  }
};
var ObsifetchPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.defaultLogo = `        ;++       
      ;;+++X;     
    :;;;;;XXXX    
    :::::XXXXXX   
   ::..::XXXXXX   
   $+   .Xxx+++   
  $$$X  .:++++++  
 X$$$$X$&&$X+;;;+ 
;XXXXX$&$$$$$$;;. 
  XXXX$$$$$XXXX   
    XX$$XXXXXXX   
         ;XXXX     `;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ObsifetchSettingTab(this.app, this));
    console.log("loading obsifetch");
    this.addCommand({
      id: "show",
      name: "Show",
      callback: () => this.displayObsifetch()
    });
    this.ribbonIcon = this.addRibbonIcon(
      "terminal-square",
      "obsifetch",
      (evt) => {
        this.displayObsifetch();
      }
    );
  }
  async getVaultStats() {
    var _a, _b, _c;
    const activeTheme = ((_a = this.app.customCss) == null ? void 0 : _a.theme) || "default";
    const manifests = ((_b = this.app.plugins) == null ? void 0 : _b.manifests) || {};
    const communityPluginCount = Object.keys(manifests).length;
    const corePluginCount = Object.keys(((_c = this.app.internalPlugins) == null ? void 0 : _c.plugins) || {}).length;
    const allFiles = this.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian.TFile);
    const markdownFiles = allFiles.filter((file) => file.extension === "md");
    const attachments = allFiles.filter((file) => file.extension !== "md");
    const resolvedLinks = this.app.metadataCache.resolvedLinks;
    const linkedFiles = /* @__PURE__ */ new Set();
    let internalLinkCount = 0;
    Object.values(resolvedLinks).forEach((links) => {
      Object.keys(links).forEach((path) => {
        linkedFiles.add(path);
        internalLinkCount += links[path];
      });
    });
    const orphanedFiles = markdownFiles.filter(
      (file) => !linkedFiles.has(file.path)
    ).length;
    const totalSize = await this.calculateTotalSize(allFiles);
    const attachmentSize = await this.calculateTotalSize(attachments);
    const markdownSize = await this.calculateTotalSize(markdownFiles);
    const attachmentPercentage = (attachments.length / allFiles.length * 100).toFixed(1);
    return {
      totalFiles: allFiles.length,
      totalMarkdown: markdownFiles.length,
      totalAttachments: attachments.length,
      orphanedFiles,
      internalLinkCount,
      attachmentPercentage: `${attachmentPercentage}%`,
      totalPlugins: communityPluginCount + corePluginCount,
      communityPlugins: communityPluginCount,
      corePlugins: corePluginCount,
      theme: activeTheme,
      version: this.manifest.version,
      totalSize: this.formatSize(totalSize),
      markdownSize: this.formatSize(markdownSize),
      attachmentSize: this.formatSize(attachmentSize)
    };
  }
  async calculateTotalSize(files) {
    let total = 0;
    for (const file of files) {
      try {
        const stat = await this.app.vault.adapter.stat(file.path);
        if (stat) {
          total += stat.size;
        }
      } catch (e) {
        console.warn(`Failed to get size for file: ${file.path}`);
      }
    }
    return total;
  }
  formatSize(bytes) {
    const units = ["B", "KB", "MB", "GB"];
    let size = bytes;
    let unitIndex = 0;
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }
    return `${size.toFixed(1)} ${units[unitIndex]}`;
  }
  getSystemInfo() {
    const isDarkTheme = document.body.classList.contains("theme-dark");
    let os = "unknown";
    if (import_obsidian.Platform.isLinux) {
      os = "linux";
    } else if (import_obsidian.Platform.isMacOS) {
      os = "macos";
    } else if (import_obsidian.Platform.isWin) {
      os = "windows";
    }
    return [
      `appearance: ${isDarkTheme ? "dark" : "light"}`,
      `os: ${os}`
    ].join("\n").trimEnd();
  }
  async displayObsifetch() {
    const stats = await this.getVaultStats();
    const info = this.getSystemInfo();
    const logo = this.settings.customLogo || this.defaultLogo;
    const vaultInfoLines = [
      `obsifetch: v${this.manifest.version}`,
      `total files: ${stats.totalFiles} (${stats.totalSize})`,
      `markdown files: ${stats.totalMarkdown} (${stats.markdownSize})`,
      `attachments: ${stats.totalAttachments} (${stats.attachmentSize})`,
      `orphan files: ${stats.orphanedFiles}`,
      `internal links: ${stats.internalLinkCount}`,
      `core plugins: ${stats.corePlugins}`,
      `community plugins: ${stats.communityPlugins}`,
      `theme: ${stats.theme}`
    ].join("\n").trimEnd();
    new ObsifetchModal(
      this.app,
      logo,
      vaultInfoLines,
      info
    ).open();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    console.log("unloading obsifetch");
  }
};


/* nosourcemap */